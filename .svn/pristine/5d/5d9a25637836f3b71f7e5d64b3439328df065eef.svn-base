package com.willian.weibo.activity;

import android.graphics.drawable.AnimationDrawable;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;

import com.sina.weibo.sdk.openapi.models.User;
import com.willian.weibo.R;
import com.willian.weibo.adapter.ChatAdapter;
import com.willian.weibo.bean.Chat;
import com.willian.weibo.bean.Recorder;
import com.willian.weibo.utils.MediaManager;
import com.willian.weibo.utils.TitleBarBuilder;
import com.willian.weibo.widget.VoiceButton;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * 聊天界面
 */
public class ChatActivity extends BaseActivity implements View.OnClickListener {

    private static final String TAG = "ChatActivity";

    // 用户昵称
    private String userName;
    // 用户头像URL
    private String userAvatar;

    private ListView mListView;

    private ChatAdapter mAdatper;

    private List<Chat> mChatList = new ArrayList<Chat>();

    private ImageView mTypeImage;

    private EditText inputText;

    private VoiceButton voiceButton;

    private ImageView addImage;

    private Button sendButton;
    // 聊天类型的默认图标为语音
    private boolean isVoice = true;

    private View mAnimView;

    private MediaManager mMediaManager;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_chat);
        // 获取用户昵称
        userName = getIntent().getStringExtra("userName");
        // 获取用户头像
        userAvatar = getIntent().getStringExtra("userAvatar");

        mMediaManager = MediaManager.getInstance();

        initView();

        handleEvent();
    }

    private void initView() {
        new TitleBarBuilder(this)
                .setLeftImage(R.drawable.titlebar_back_selector)
                .setRightText(getResources().getString(R.string.setting))
                .setTitleText(userName)
                .setLeftOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        finish();
                        overridePendingTransition(R.anim.slide_out_from_right, R.anim.slide_in_from_left);
                    }
                }).build();

        mListView = (ListView) findViewById(R.id.lv_chat);
        mAdatper = new ChatAdapter(this, mChatList);
        mAdatper.setAvatarUrl(userAvatar);
        mListView.setAdapter(mAdatper);

        mTypeImage = (ImageView) findViewById(R.id.iv_chat_type);
        inputText = (EditText) findViewById(R.id.et_chat_content);
        voiceButton = (VoiceButton) findViewById(R.id.btn_send_voice);
        addImage = (ImageView) findViewById(R.id.iv_add);
        sendButton = (Button) findViewById(R.id.btn_send);
    }

    private void handleEvent() {
        mTypeImage.setOnClickListener(this);
        sendButton.setOnClickListener(this);
        // 监听文本输入框
        inputText.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {

            }

            @Override
            public void afterTextChanged(Editable s) {
                // 输入文本内容后，显示发送按钮
                int len = s.length();
                if (len > 0) {
                    addImage.setVisibility(View.GONE);
                    sendButton.setVisibility(View.VISIBLE);
                } else {
                    addImage.setVisibility(View.VISIBLE);
                    sendButton.setVisibility(View.GONE);
                }
            }
        });

        voiceButton.setOnAudioFinishedListener(new VoiceButton.AudioFinishedListener() {
            @Override
            public void onFinish(float audioTime, String filePath) {
                Recorder mRecorder = new Recorder(audioTime, filePath);

                Chat mChat = new Chat();
                mChat.setChatType(1);
                mChat.setChatTime(getCurTime());
                mChat.setRecorder(mRecorder);
                mAdatper.addItem(mChat);
                mListView.setSelection(mAdatper.getCount() - 1);
            }
        });

        mListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                Chat mChat = mChatList.get(position);
                int chatType = mChat.getChatType();
                // 如果发送的是语音，则点击后播放
                if (chatType == 1) {
                    Recorder mRecorder = mChat.getRecorder();
                    // 点击其他Item，则当前Item停止播放音频
                    if (mAnimView != null) {
                        mAnimView.setBackgroundResource(R.mipmap.messages_audio_animation_white_from3);
                        mAnimView = null;
                    }
                    // 播放语音动画
                    mAnimView = view.findViewById(R.id.iv_chat_voice);
                    mAnimView.setBackgroundResource(R.drawable.play_audio);
                    AnimationDrawable anim = (AnimationDrawable) mAnimView.getBackground();
                    anim.start();
                    // 播放音频
                    mMediaManager.playVoice(mRecorder.getFilePath(), new MediaPlayer.OnCompletionListener() {
                        @Override
                        public void onCompletion(MediaPlayer mp) {
                            mAnimView.setBackgroundResource(R.mipmap.messages_audio_animation_white_from3);
                        }
                    });
                }
            }
        });
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.iv_chat_type:
                if (isVoice) {
                    // 点击后，图标切换为键盘Icon
                    mTypeImage.setImageResource(R.drawable.msg_keyboard_selector);
                    // 隐藏输入框
                    inputText.setVisibility(View.GONE);
                    // 显示语音发送按钮
                    voiceButton.setVisibility(View.VISIBLE);
                    isVoice = false;
                } else {
                    // 点击后，图标切换为语音Icon
                    mTypeImage.setImageResource(R.drawable.msg_voice_bg_selector);
                    // 显示输入框
                    inputText.setVisibility(View.VISIBLE);
                    // 隐藏语音发送按钮
                    voiceButton.setVisibility(View.GONE);
                    isVoice = true;
                }
                break;
            case R.id.btn_send:
                // 获取当前用户
                User mUser = mApplication.currentUser;
                String textMsg = inputText.getText().toString();
                Chat mChat = new Chat();
                mChat.setChatType(0);
                mChat.setChatTime(getCurTime());
                mChat.setInputContent(textMsg);
                // 更新适配器
                mAdatper.addItem(mChat);
                // 清空文本输入内容
                inputText.setText("");
                // 将ListView定位在尾部
                mListView.setSelection(mAdatper.getCount() - 1);
                break;
            default:
                break;
        }
    }

    /**
     * 获取当前聊天时间
     *
     * @return
     */
    private String getCurTime() {
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
        String chatTime = sdf.format(new Date());
        return chatTime;
    }

    @Override
    protected void onPause() {
        super.onPause();
        mMediaManager.pauseVoice();
    }

    @Override
    protected void onResume() {
        super.onResume();
        mMediaManager.resumeVoice();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        mMediaManager.releaseVoice();
    }
}
