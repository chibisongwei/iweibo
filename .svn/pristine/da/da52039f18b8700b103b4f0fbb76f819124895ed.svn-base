package com.willian.weibo.activity;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.text.Html;
import android.text.TextUtils;
import android.view.View;
import android.widget.AbsListView;
import android.widget.FrameLayout;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TextView;
import android.widget.Toast;

import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.sina.weibo.sdk.auth.Oauth2AccessToken;
import com.sina.weibo.sdk.exception.WeiboException;
import com.sina.weibo.sdk.net.RequestListener;
import com.sina.weibo.sdk.openapi.CommentsAPI;
import com.sina.weibo.sdk.openapi.models.Comment;
import com.sina.weibo.sdk.openapi.models.CommentList;
import com.sina.weibo.sdk.openapi.models.ErrorInfo;
import com.sina.weibo.sdk.openapi.models.Status;
import com.sina.weibo.sdk.openapi.models.User;
import com.willian.weibo.utils.LogUtil;
import com.willian.weibo.R;
import com.willian.weibo.adapter.StatusCommentAdapter;
import com.willian.weibo.adapter.StatusPicAdapter;
import com.willian.weibo.sdk.AccessTokenKeeper;
import com.willian.weibo.sdk.Constants;
import com.willian.weibo.utils.DateUtil;
import com.willian.weibo.utils.StringUtil;
import com.willian.weibo.utils.TitleBarBuilder;
import com.willian.weibo.utils.WeiboUtil;

import java.util.ArrayList;
import java.util.List;

/**
 * 微博详情界面
 */
public class StatusDetailActivity extends Activity implements RadioGroup.OnCheckedChangeListener {

    private static final String TAG = "StatusDetailActivity";

    private static final int REQUEST_CODE_WRITE_COMMENT = 1;

    private ImageLoader mImageLoader;

    private View statusDetailView;

    private ImageView userAvatar;
    private ImageView verifiedImage;
    private TextView userName;
    private TextView sendTime;
    private TextView source;

    private TextView statusContent;
    private FrameLayout statusImageLayout;
    private GridView statusImages;
    private ImageView statusSingleImage;

    private LinearLayout retweetLayout;
    private TextView retweetContent;
    private FrameLayout retweetImageLayout;
    private GridView retweetImages;
    private ImageView retweetSingleImage;

    private TextView retweetCount;
    private TextView commentCount;
    private TextView attitudeCount;

    /**
     * 顶部悬浮标题栏
     */
    private View topTab;
    private RadioGroup topRadioGroup;
    private RadioButton topRetweet;
    private RadioButton topComment;
    private RadioButton topAttitude;

    private View statusDetailTab;
    private RadioGroup statusDetailRadioGroup;
    private RadioButton retweetButton;
    private RadioButton commentButton;
    private RadioButton attitudeButton;

    private View headerView;
    private View footerView;

    private PullToRefreshListView mRefreshListView;
    private List<Comment> mCommentList = new ArrayList<Comment>();
    private StatusCommentAdapter commentAdapter;

    /**
     * 底部操作栏
     */
    private LinearLayout bottomLayout;
    private LinearLayout retweetActionLayout;
    private LinearLayout commentActionLayout;
    private LinearLayout attitudeActionLayout;
    /**
     * 当前 Token 信息
     */
    private Oauth2AccessToken mAccessToken;
    /**
     * 微博评论接口
     */
    private CommentsAPI mCommentsAPI;

    // 详情页的微博信息
    private Status mStatus;
    // 是否需要滚动至评论部分
    private boolean scroll2Comment;
    /**
     * 当前页数
     */
    private int curPage = 1;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_satuts_detail);

        // 获取当前已保存过的 Token
        mAccessToken = AccessTokenKeeper.readAccessToken(this);
        // 对statusAPI实例化
        mCommentsAPI = new CommentsAPI(this, Constants.APP_KEY, mAccessToken);

        // 获取intent传入的信息
        mStatus = (Status) getIntent().getSerializableExtra("status");
        scroll2Comment = getIntent().getBooleanExtra("scroll2Comment", false);

        // 初始化
        initView();
        // 设置数据
        setData(mStatus);
        // 默认加载微博评论
        loadComments(1);
    }

    private void initView() {

        initTitleView();

        initStatusView();

        initListView();

        initBottomView();
    }

    private void initTitleView() {
        new TitleBarBuilder(this)
                .setTitleText(getResources().getText(R.string.weibo_detail).toString())
                .setLeftImage(R.drawable.titlebar_back_selector)
                .setRightImage(R.drawable.titlebar_icon_more_selector)
                .setLeftOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        finish();
                    }
                })
                .setRightOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });
    }

    private void initStatusView() {
        mImageLoader = ImageLoader.getInstance();
        statusDetailView = View.inflate(this, R.layout.listview_item_status, null);
        // 设置背景色
        statusDetailView.setBackgroundResource(R.color.white);
        // 隐藏底部操作栏
        statusDetailView.findViewById(R.id.layout_status_action).setVisibility(View.GONE);

        userAvatar = (ImageView) statusDetailView.findViewById(R.id.iv_avatar);
        verifiedImage = (ImageView) statusDetailView.findViewById(R.id.iv_verified);
        userName = (TextView) statusDetailView.findViewById(R.id.tv_username);
        sendTime = (TextView) statusDetailView.findViewById(R.id.tv_time);
        source = (TextView) statusDetailView.findViewById(R.id.tv_source);

        statusContent = (TextView) statusDetailView.findViewById(R.id.tv_status_content);
        statusImageLayout = (FrameLayout) statusDetailView.findViewById(R.id.layout_status_image);
        statusImages = (GridView) statusImageLayout.findViewById(R.id.gv_status_image);
        statusSingleImage = (ImageView) statusImageLayout.findViewById(R.id.iv_status_image);

        retweetLayout = (LinearLayout) statusDetailView.findViewById(R.id.layout_status_retweet);
        retweetContent = (TextView) statusDetailView.findViewById(R.id.tv_retweet_content);
        retweetImageLayout = (FrameLayout) statusDetailView.findViewById(R.id.layout_retweet_image);
        retweetImages = (GridView) retweetImageLayout.findViewById(R.id.gv_status_image);
        retweetSingleImage = (ImageView) retweetImageLayout.findViewById(R.id.iv_status_image);
    }

    private void initListView() {
        topTab = findViewById(R.id.layout_detail_tab);
        topRadioGroup = (RadioGroup) topTab.findViewById(R.id.rg_status_detail_tab);
        topRetweet = (RadioButton) topTab.findViewById(R.id.rb_retweet);
        topComment = (RadioButton) topTab.findViewById(R.id.rb_comment);
        topAttitude = (RadioButton) topTab.findViewById(R.id.rb_attitude);
        topRadioGroup.setOnCheckedChangeListener(this);

        statusDetailTab = View.inflate(this, R.layout.include_status_detail_tab, null);
        statusDetailRadioGroup = (RadioGroup) statusDetailTab.findViewById(R.id.rg_status_detail_tab);
        retweetButton = (RadioButton) statusDetailTab.findViewById(R.id.rb_retweet);
        commentButton = (RadioButton) statusDetailTab.findViewById(R.id.rb_comment);
        attitudeButton = (RadioButton) statusDetailTab.findViewById(R.id.rb_attitude);
        statusDetailRadioGroup.setOnCheckedChangeListener(this);

        mRefreshListView = (PullToRefreshListView) findViewById(R.id.lv_comment);
        commentAdapter = new StatusCommentAdapter(this, mCommentList);
        mRefreshListView.setAdapter(commentAdapter);
        ListView listView = mRefreshListView.getRefreshableView();
        footerView = View.inflate(this, R.layout.listview_foot, null);
        listView.addHeaderView(statusDetailView);
        listView.addHeaderView(statusDetailTab);
        // 下拉刷新监听
        mRefreshListView.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener<ListView>() {
            @Override
            public void onRefresh(PullToRefreshBase<ListView> refreshView) {
                loadComments(1);
            }
        });
        // 滑动到底部最后一个Item监听
        mRefreshListView.setOnLastItemVisibleListener(new PullToRefreshBase.OnLastItemVisibleListener() {
            @Override
            public void onLastItemVisible() {
                loadComments(curPage + 1);
            }
        });
        // 滚动状态监听
        mRefreshListView.setOnScrollListener(new AbsListView.OnScrollListener() {
            @Override
            public void onScrollStateChanged(AbsListView view, int scrollState) {

            }

            @Override
            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
                // 当滑动到tab为第一个item时，则显示顶部隐藏的悬浮菜单栏
                topTab.setVisibility(firstVisibleItem >= 2 ? View.VISIBLE : View.GONE);
            }
        });
    }

    private void initBottomView() {
        bottomLayout = (LinearLayout) findViewById(R.id.layout_detail_bar);
        retweetActionLayout = (LinearLayout) bottomLayout.findViewById(R.id.layout_retweet);
        commentActionLayout = (LinearLayout) bottomLayout.findViewById(R.id.layout_comment);
        attitudeActionLayout = (LinearLayout) bottomLayout.findViewById(R.id.layout_attitude);

        commentActionLayout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent mIntent = new Intent(StatusDetailActivity.this, WriteCommentActivity.class);
                mIntent.putExtra("status", mStatus);
                startActivityForResult(mIntent, REQUEST_CODE_WRITE_COMMENT);
            }
        });
    }

    private void loadComments(final int page) {

        long statusId = Long.parseLong(mStatus.id);
        mCommentsAPI.show(statusId, 0L, 0L, 20, page, CommentsAPI.SRC_FILTER_ALL, new RequestListener() {

            @Override
            public void onComplete(String response) {
                if (!TextUtils.isEmpty(response)) {
                    LogUtil.showLog(TAG, response);
                    // 调用 CommentList#parse 解析字符串成评论列表对象
                    CommentList comments = CommentList.parse(response);
                    if (comments != null && comments.total_number > 0) {
                        if (page == 1) {
                            mCommentList.clear();
                        }
                        curPage = page;
                        commentButton.setText(getResources().getString(R.string.comment) + " " + WeiboUtil.getDisplayCount(comments.total_number));
                        topComment.setText(getResources().getString(R.string.comment) + " " + WeiboUtil.getDisplayCount(comments.total_number));
                        // 加载更多数据
                        if (comments.commentList != null && comments.commentList.size() > 0) {
                            loadMoreData(comments);
                        }
                        // 判断是否需要滚动到评论列表
                        if (scroll2Comment) {
                            mRefreshListView.getRefreshableView().setSelection(2);
                            scroll2Comment = false;
                        }
                    } else {
                        Toast.makeText(StatusDetailActivity.this, response,
                                Toast.LENGTH_LONG).show();
                    }
                }
            }

            @Override
            public void onWeiboException(WeiboException e) {
                LogUtil.showLog(TAG, e.getMessage());
                ErrorInfo info = ErrorInfo.parse(e.getMessage());
                Toast.makeText(StatusDetailActivity.this, info.toString(),
                        Toast.LENGTH_LONG).show();
            }

        });
    }

    private void loadMoreData(CommentList comments) {
        for (Comment mComment : comments.commentList) {
            if (!mCommentList.contains(comments)) {
                mCommentList.add(mComment);
            }
        }
        commentAdapter.notifyDataSetChanged();

        if (mCommentList.size() < comments.total_number) {
            addFootView(mRefreshListView, footerView);
        } else {
            removeFootView(mRefreshListView, footerView);
        }

        mRefreshListView.onRefreshComplete();
    }

    private void addFootView(PullToRefreshListView pullListView, View footView) {
        ListView listView = pullListView.getRefreshableView();
        if (listView.getFooterViewsCount() == 1) {
            listView.addFooterView(footView);
        }
    }

    private void removeFootView(PullToRefreshListView pullListView, View footView) {
        ListView listView = pullListView.getRefreshableView();
        if (listView.getFooterViewsCount() > 1) {
            listView.removeFooterView(footView);
        }
    }

    @Override
    public void onCheckedChanged(RadioGroup group, int checkedId) {
        switch (checkedId) {
            case R.id.rb_retweet:
                retweetButton.setChecked(true);
                topRetweet.setChecked(true);
                break;
            case R.id.rb_comment:
                commentButton.setChecked(true);
                topComment.setChecked(true);
                break;
            case R.id.rb_attitude:
                attitudeButton.setChecked(true);
                topAttitude.setChecked(true);
                break;
            default:
                break;
        }
    }

    private void setData(final Status mStatus) {
        // 设置微博信息
        setStatus(mStatus);
        // 设置转发微博信息
        setRetweetStatus(mStatus);

        // 顶部悬浮的菜单栏
        topRetweet.setText(getResources().getString(R.string.retweet) + " " + WeiboUtil.getDisplayCount(mStatus.reposts_count));
        topComment.setText(getResources().getString(R.string.comment) + " " + WeiboUtil.getDisplayCount(mStatus.comments_count));
        topAttitude.setText(getResources().getString(R.string.attitude) + " " + WeiboUtil.getDisplayCount(mStatus.attitudes_count));
        // listView headerView - 添加至列表中作为header的菜单栏
        retweetButton.setText(getResources().getString(R.string.retweet) + " " + WeiboUtil.getDisplayCount(mStatus.reposts_count));
        commentButton.setText(getResources().getString(R.string.comment) + " " + WeiboUtil.getDisplayCount(mStatus.comments_count));
        attitudeButton.setText(getResources().getString(R.string.attitude) + " " + WeiboUtil.getDisplayCount(mStatus.attitudes_count));
    }

    private void setStatus(Status mStatus) {
        // 获取围脖发布者的头像
        String userImageUrl = mStatus.user.avatar_large;
        // 获取微博发布者的ID
        String user_name = mStatus.user.name;
        // 是否认证
        boolean verified = mStatus.user.verified;

        mImageLoader.displayImage(userImageUrl, userAvatar);
        userName.setText(user_name);
        if (verified) {
            verifiedImage.setVisibility(View.VISIBLE);
        } else {
            verifiedImage.setVisibility(View.GONE);
        }
        // 获取微博发送时间
        String createdAt = mStatus.created_at;
        // 格式化时间
        String createdTime = DateUtil.getPostDate(createdAt, sendTime);

        sendTime.setText(createdTime);

        String sourceName = "";

        if (!TextUtils.isEmpty(mStatus.source)) {
            sourceName = getResources().getString(R.string.weibo_from) + " " + Html.fromHtml(mStatus.source);
        }
        source.setText(sourceName);

        // 获取微博内容
        statusContent.setText(StringUtil.getWeiboContent(this, statusContent, mStatus.text));

        setImages(mStatus, statusImageLayout, statusImages, statusSingleImage);
    }

    private void setRetweetStatus(Status status) {

        // 获取转发的微博
        Status retweetStatus = status.retweeted_status;

        if (retweetStatus != null) {
            User retweetUser = retweetStatus.user;
            if (retweetUser != null) {
                String retweetContentStr = "@" + retweetUser.name + ":" + retweetStatus.text;
                retweetLayout.setVisibility(View.VISIBLE);
                retweetContent.setText(StringUtil.getWeiboContent(this, retweetContent, retweetContentStr));
            } else {
                retweetContent.setText("抱歉，该微博已被删除。");
            }
            setImages(retweetStatus, retweetImageLayout, retweetImages, retweetSingleImage);
        } else {
            retweetLayout.setVisibility(View.GONE);
        }
    }

    private void setImages(Status status, FrameLayout layout, GridView gridView, ImageView imageView) {
        // 获取微博单图
        String picUrlStr = status.thumbnail_pic;
        // 获取微博多图
        List<String> picUrlList = status.pic_urls;

        // 多图
        if (picUrlList != null && picUrlList.size() > 1) {
            layout.setVisibility(View.VISIBLE);
            gridView.setVisibility(View.VISIBLE);
            imageView.setVisibility(View.GONE);

            StatusPicAdapter mPicAdapter = new StatusPicAdapter(this, picUrlList);
            gridView.setAdapter(mPicAdapter);

        } else if (!TextUtils.isEmpty(picUrlStr)) { // 单图
            layout.setVisibility(View.VISIBLE);
            gridView.setVisibility(View.GONE);
            imageView.setVisibility(View.VISIBLE);

            mImageLoader.displayImage(picUrlStr, imageView);
        } else { // 没有图片，则不显示该布局
            layout.setVisibility(View.GONE);
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (resultCode == RESULT_CANCELED) {
            return;
        }

        switch (requestCode) {
            case REQUEST_CODE_WRITE_COMMENT:
                // 评论发送是否成功
                boolean sendComment = data.getBooleanExtra("is_send_comment", false);
                if (sendComment) {
                    scroll2Comment = true;
                    loadComments(1);
                }
                break;
            default:
                break;
        }
    }
}
