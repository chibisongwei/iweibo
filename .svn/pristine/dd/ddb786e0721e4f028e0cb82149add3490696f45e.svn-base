package com.willian.weibo.activity;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.AbsListView;
import android.widget.ListView;
import android.widget.Toast;

import com.sina.weibo.sdk.auth.Oauth2AccessToken;
import com.sina.weibo.sdk.exception.WeiboException;
import com.sina.weibo.sdk.net.RequestListener;
import com.sina.weibo.sdk.openapi.legacy.FriendshipsAPI;
import com.sina.weibo.sdk.openapi.models.ErrorInfo;
import com.sina.weibo.sdk.openapi.models.User;
import com.sina.weibo.sdk.utils.LogUtil;
import com.willian.weibo.R;
import com.willian.weibo.adapter.FriendsAdapter;
import com.willian.weibo.bean.Contact;
import com.willian.weibo.bean.FriendshipList;
import com.willian.weibo.sdk.AccessTokenKeeper;
import com.willian.weibo.sdk.Constants;
import com.willian.weibo.utils.PinyinUtil;
import com.willian.weibo.utils.TitleBarBuilder;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

/**
 * 好友列表界面
 */
public class FriendsActivity extends BaseActivity {

    private static final String TAG = "FriendsActivity";

    private Oauth2AccessToken mAccessToken;

    private FriendshipsAPI mFriendAPI;

    private ListView mListView;

    private FriendsAdapter mFriendsAdapter;

    private List<Contact> mContactList = new ArrayList<Contact>();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_friends);

        // 获取当前已保存过的 Token
        mAccessToken = AccessTokenKeeper.readAccessToken(this);
        mFriendAPI = new FriendshipsAPI(this, Constants.APP_KEY, mAccessToken);

        initView();

        // 加载好友信息
        loadFriends(1);
    }

    private void initView() {
        new TitleBarBuilder(this)
                .setLeftImage(R.drawable.titlebar_back_selector)
                .setTitleText(getResources().getString(R.string.choose_contact))
                .setRightButton(getResources().getString(R.string.chat))
                .setLeftOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        finish();
                        overridePendingTransition(R.anim.slide_out_from_right, R.anim.slide_in_from_left);
                    }
                })
                .setRightOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        List<Contact> selectedContact = mFriendsAdapter.getFriendList();
                        Intent mIntent = new Intent(FriendsActivity.this, ChatActivity.class);
                        // 选择的联系人
                        mIntent.putExtra("selectedContact", (Serializable) selectedContact);
                        startActivity(mIntent);
                        finish();
                        overridePendingTransition(R.anim.slide_out_to_left, R.anim.slide_in_from_right);
                    }
                });

        mListView = (ListView) findViewById(R.id.lv_friends);

        mListView.setOnScrollListener(new AbsListView.OnScrollListener() {
            @Override
            public void onScrollStateChanged(AbsListView view, int scrollState) {

            }

            @Override
            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {

            }
        });
    }

    /**
     * 加载好友信息
     *
     * @param page
     */
    private void loadFriends(int page) {
        // 获取当前用户ID
        long uid = Long.parseLong(mAccessToken.getUid());
        mFriendAPI.bilateral(uid, 50, page, new RequestListener() {
            @Override
            public void onComplete(String response) {
                if (response.startsWith("{\"users\"")) {
                    // 调用 FriendshipList#parse 解析字符串成关注列表对象
                    FriendshipList friendships = FriendshipList.parse(response);
                    if (friendships != null && friendships.total_number > 0) {
                        List<User> mFriendshipList = friendships.userList;
                        loadMoreData(mFriendshipList);
                    }
                } else {
                    Toast.makeText(FriendsActivity.this, response,
                            Toast.LENGTH_LONG).show();
                }
            }

            @Override
            public void onWeiboException(WeiboException e) {
                LogUtil.e(TAG, e.getMessage());
                ErrorInfo info = ErrorInfo.parse(e.getMessage());
                Toast.makeText(FriendsActivity.this, info.toString(),
                        Toast.LENGTH_LONG).show();
            }
        });
    }

    private void loadMoreData(List<User> mFriendshipList) {
        for (User mUser : mFriendshipList) {
            String headUrl = mUser.avatar_large;
            String userName = mUser.name;
            String letter = PinyinUtil.convertToFirstSpell(userName).substring(0, 1);
            Contact mContact = new Contact();
            mContact.setSortLetter(letter);
            mContact.setHeadUrl(headUrl);
            mContact.setUserName(userName);
            mContactList.add(mContact);
        }
        if (mContactList.size() > 0) {
            mFriendsAdapter = new FriendsAdapter(this, mContactList);
            mListView.setAdapter(mFriendsAdapter);
        }
    }
}
